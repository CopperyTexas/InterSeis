import { Component } from '@angular/core';
import { MatDialogModule, MatDialogRef } from '@angular/material/dialog';
import {
  FormBuilder,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIcon } from '@angular/material/icon';
import { FileService } from '../../services/file.service';
import { ProjectService } from '../../services/project.service';

declare const window: any; // –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è Electron API

@Component({
  selector: 'app-new-project-dialog',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatDialogModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIcon,
  ],
  templateUrl: './new-project-dialog.component.html',
  styleUrl: './new-project-dialog.component.scss',
})
export class NewProjectDialogComponent {
  projectForm: FormGroup;

  constructor(
    public dialogRef: MatDialogRef<NewProjectDialogComponent>,
    private fb: FormBuilder,
    private fileService: FileService,
    private projectService: ProjectService,
  ) {
    this.projectForm = this.fb.group({
      objectName: ['', Validators.required],
      profileName: ['', Validators.required],
      folderPath: ['', Validators.required],
    });
  }

  async onSelectFolder(): Promise<void> {
    try {
      window.electron.sendLog('üü¢ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏...');
      const result = await this.fileService.selectFolder();

      if (result && result.folderPath) {
        this.projectForm.patchValue({ folderPath: result.folderPath });
        window.electron.sendLog(`üìÇ –ü–∞–ø–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: ${result.folderPath}`);
      } else {
        window.electron.sendLog('‚ö†Ô∏è –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
      }
    } catch (error) {
      const err = error as Error;
      console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏:', err);
      window.electron.sendLog(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏: ${err.message}`);
    }
  }

  async onSubmit(): Promise<void> {
    if (this.projectForm.valid) {
      const projectData = this.projectForm.value;
      window.electron.sendLog('üìå –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
      window.electron.sendLog(
        `üìä –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞: ${JSON.stringify(projectData)}`,
      );

      try {
        const filePath = await this.fileService.createProject(projectData);
        window.electron.sendLog(`‚úÖ –§–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω: ${filePath}`);

        const projectContent = await this.fileService.readProject(filePath);
        window.electron.sendLog('üìñ –§–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω.');

        this.projectService.setProjectInfo(projectContent);
        window.electron.sendLog('üîÑ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Å–µ—Ä–≤–∏—Å.');

        this.dialogRef.close(projectContent);
      } catch (error) {
        const err = error as Error;
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', err);
        window.electron.sendLog(
          `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${err.message}`,
        );
      }
    } else {
      window.electron.sendLog('‚ö†Ô∏è –§–æ—Ä–º–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞.');
    }
  }

  onCancel(): void {
    window.electron.sendLog('üö™ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
    this.dialogRef.close(null);
  }
}
